# Docker Compose override for development with sorting system optimizations
version: '3.8'

services:
  # Backend with sorting system optimizations
  backend:
    environment:
      # Enable sorting system debugging
      SORTING_DEBUG: true
      SORTING_CACHE_TTL: 300
      SORTING_MAX_RESULTS: 1000
      # Performance optimizations
      NODE_OPTIONS: "--max-old-space-size=1024"
      UV_THREADPOOL_SIZE: 16
    volumes:
      # Hot reload for sorting components
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
      - ./backend/tsconfig.json:/app/tsconfig.json
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Frontend with sorting system optimizations
  frontend:
    environment:
      # Enable sorting system debugging
      NEXT_PUBLIC_SORTING_DEBUG: true
      NEXT_PUBLIC_SORTING_CACHE_TTL: 300
      # Performance optimizations
      NODE_OPTIONS: "--max-old-space-size=1024"
    volumes:
      # Hot reload for sorting components
      - .:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PostgreSQL with sorting optimizations
  postgres:
    environment:
      # Performance optimizations for sorting
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_connections=200
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis with sorting optimizations
  redis:
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB with sorting optimizations
  mongodb:
    environment:
      # Performance optimizations
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: seth_clinic_mongo
    command: >
      mongod
      --wiredTigerCacheSizeGB 0.5
      --maxConns 200
      --logRotate reopen
      --logappend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Worker with sorting optimizations
  worker:
    environment:
      # Enable sorting system debugging
      SORTING_DEBUG: true
      SORTING_CACHE_TTL: 300
      # Performance optimizations
      NODE_OPTIONS: "--max-old-space-size=512"
      UV_THREADPOOL_SIZE: 8
    volumes:
      # Hot reload for worker
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
    command: npm run worker
    healthcheck:
      test: ["CMD", "pgrep", "-f", "worker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Additional volumes for sorting system
volumes:
  # Sorting system cache
  sorting_cache:
    driver: local
  # Performance monitoring data
  performance_data:
    driver: local
  # Sorting system logs
  sorting_logs:
    driver: local

# Network optimizations
networks:
  seth-clinic-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
